package com.tpp.threat_perception_platform.pojo;

import java.io.Serializable;
import java.util.List;

/**
 * 
 * @TableName app_vulnerability
 */
public class AppVulnerability implements Serializable {
    /**
     * 自增ID
     */
    private Integer id;

    /**
     * 应用漏洞名称
     */
    private String appVulName;

    /**
     * 应用漏洞介绍
     */
    private String appVulDesc;

    /**
     * 应用漏洞类型
     */
    private String appVulType;

    /**
     * 风险等级：{1：高危，2：中危，3：低危}
     */
    private Integer appVulLevel;

    /**
     * 攻击请求发起方式(GET,POST,DELETE,UPDATE,HEADER,OPTION)
     */
    private String requestType;

    /**
     * 攻击请求发起路径
     */
    private String appVulPath;

    /**
     * 攻击载荷
     */
    private String payload;

    /**
     * 应用类型（应用名称和版本号）
     */
    private String appType;

    /**
     * 漏洞存在验证标志
     */
    private String appVulFlag;

    /**
     * 漏洞影响到的应用
     */
    private List<UserAppVulnerability> userAppVulnerabilities;

    public List<UserAppVulnerability> getUserAppVulnerabilities() {
        return userAppVulnerabilities;
    }

    public void setUserAppVulnerabilities(List<UserAppVulnerability> userAppVulnerabilities) {
        this.userAppVulnerabilities = userAppVulnerabilities;
    }

    private static final long serialVersionUID = 1L;

    /**
     * 自增ID
     */
    public Integer getId() {
        return id;
    }

    /**
     * 自增ID
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * 应用漏洞名称
     */
    public String getAppVulName() {
        return appVulName;
    }

    /**
     * 应用漏洞名称
     */
    public void setAppVulName(String appVulName) {
        this.appVulName = appVulName;
    }

    /**
     * 应用漏洞介绍
     */
    public String getAppVulDesc() {
        return appVulDesc;
    }

    /**
     * 应用漏洞介绍
     */
    public void setAppVulDesc(String appVulDesc) {
        this.appVulDesc = appVulDesc;
    }

    /**
     * 应用漏洞类型
     */
    public String getAppVulType() {
        return appVulType;
    }

    /**
     * 应用漏洞类型
     */
    public void setAppVulType(String appVulType) {
        this.appVulType = appVulType;
    }

    /**
     * 风险等级：{1：高危，2：中危，3：低危}
     */
    public Integer getAppVulLevel() {
        return appVulLevel;
    }

    /**
     * 风险等级：{1：高危，2：中危，3：低危}
     */
    public void setAppVulLevel(Integer appVulLevel) {
        this.appVulLevel = appVulLevel;
    }

    /**
     * 攻击请求发起方式(GET,POST,DELETE,UPDATE,HEADER,OPTION)
     */
    public String getRequestType() {
        return requestType;
    }

    /**
     * 攻击请求发起方式(GET,POST,DELETE,UPDATE,HEADER,OPTION)
     */
    public void setRequestType(String requestType) {
        this.requestType = requestType;
    }

    /**
     * 攻击请求发起路径
     */
    public String getAppVulPath() {
        return appVulPath;
    }

    /**
     * 攻击请求发起路径
     */
    public void setAppVulPath(String appVulPath) {
        this.appVulPath = appVulPath;
    }

    /**
     * 攻击载荷
     */
    public String getPayload() {
        return payload;
    }

    /**
     * 攻击载荷
     */
    public void setPayload(String payload) {
        this.payload = payload;
    }

    /**
     * 应用类型（应用名称和版本号）
     */
    public String getAppType() {
        return appType;
    }

    /**
     * 应用类型（应用名称和版本号）
     */
    public void setAppType(String appType) {
        this.appType = appType;
    }

    /**
     * 漏洞存在验证标志
     */
    public String getAppVulFlag() {
        return appVulFlag;
    }

    /**
     * 漏洞存在验证标志
     */
    public void setAppVulFlag(String appVulFlag) {
        this.appVulFlag = appVulFlag;
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        AppVulnerability other = (AppVulnerability) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getAppVulName() == null ? other.getAppVulName() == null : this.getAppVulName().equals(other.getAppVulName()))
            && (this.getAppVulDesc() == null ? other.getAppVulDesc() == null : this.getAppVulDesc().equals(other.getAppVulDesc()))
            && (this.getAppVulType() == null ? other.getAppVulType() == null : this.getAppVulType().equals(other.getAppVulType()))
            && (this.getAppVulLevel() == null ? other.getAppVulLevel() == null : this.getAppVulLevel().equals(other.getAppVulLevel()))
            && (this.getRequestType() == null ? other.getRequestType() == null : this.getRequestType().equals(other.getRequestType()))
            && (this.getAppVulPath() == null ? other.getAppVulPath() == null : this.getAppVulPath().equals(other.getAppVulPath()))
            && (this.getPayload() == null ? other.getPayload() == null : this.getPayload().equals(other.getPayload()))
            && (this.getAppType() == null ? other.getAppType() == null : this.getAppType().equals(other.getAppType()))
            && (this.getAppVulFlag() == null ? other.getAppVulFlag() == null : this.getAppVulFlag().equals(other.getAppVulFlag()));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getAppVulName() == null) ? 0 : getAppVulName().hashCode());
        result = prime * result + ((getAppVulDesc() == null) ? 0 : getAppVulDesc().hashCode());
        result = prime * result + ((getAppVulType() == null) ? 0 : getAppVulType().hashCode());
        result = prime * result + ((getAppVulLevel() == null) ? 0 : getAppVulLevel().hashCode());
        result = prime * result + ((getRequestType() == null) ? 0 : getRequestType().hashCode());
        result = prime * result + ((getAppVulPath() == null) ? 0 : getAppVulPath().hashCode());
        result = prime * result + ((getPayload() == null) ? 0 : getPayload().hashCode());
        result = prime * result + ((getAppType() == null) ? 0 : getAppType().hashCode());
        result = prime * result + ((getAppVulFlag() == null) ? 0 : getAppVulFlag().hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", appVulName=").append(appVulName);
        sb.append(", appVulDesc=").append(appVulDesc);
        sb.append(", appVulType=").append(appVulType);
        sb.append(", appVulLevel=").append(appVulLevel);
        sb.append(", requestType=").append(requestType);
        sb.append(", appVulPath=").append(appVulPath);
        sb.append(", payload=").append(payload);
        sb.append(", appType=").append(appType);
        sb.append(", appVulFlag=").append(appVulFlag);
        sb.append(", serialVersionUID=").append(serialVersionUID);
        sb.append("]");
        return sb.toString();
    }
}