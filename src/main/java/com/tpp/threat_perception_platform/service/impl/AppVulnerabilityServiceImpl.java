package com.tpp.threat_perception_platform.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tpp.threat_perception_platform.dao.AppVulnerabilityMapper;
import com.tpp.threat_perception_platform.param.MyParam;
import com.tpp.threat_perception_platform.pojo.AppVulnerability;
import com.tpp.threat_perception_platform.response.ResponseResult;
import com.tpp.threat_perception_platform.service.AppVulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AppVulnerabilityServiceImpl implements AppVulnerabilityService {


    @Autowired
    private AppVulnerabilityMapper appVulnerabilityMapper;

    /**
     * 查询所有数据，用于传输到客户端进行测试
     * @return
     */
    @Override
    public List<AppVulnerability> findAppVulnerabilityList() {
        return appVulnerabilityMapper.findAll();
    }

    /**
     * 查询所有数据并分页返回前端
     * @param myParam
     * @return
     */
    @Override
    public ResponseResult selectAll(MyParam myParam) {
        // 1. 获取分页信息
        PageHelper.startPage(myParam.getPage(), myParam.getLimit());

        // 2. 获取数据
        List<AppVulnerability> appVulnerabilities = appVulnerabilityMapper.selectAll(myParam);

        // 3. 进行分页
        PageInfo pageInfo = new PageInfo(appVulnerabilities);

        // 4. 返回数据
        return new ResponseResult(pageInfo.getTotal(), pageInfo.getList());
    }

    /**
     * 根据编号列表删除数据
     * @param ids
     * @return
     */
    @Override
    public ResponseResult deleteAppVulnerability(Integer[] ids) {
        appVulnerabilityMapper.delete(ids);
        return new ResponseResult(0, "删除成功");
    }
}
