package com.tpp.threat_perception_platform.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tpp.threat_perception_platform.dao.SystemVulnerabilityMapper;
import com.tpp.threat_perception_platform.param.MyParam;
import com.tpp.threat_perception_platform.pojo.SystemVulnerability;
import com.tpp.threat_perception_platform.response.ResponseResult;
import com.tpp.threat_perception_platform.service.SystemVulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class SystemVulnerabilityServiceImpl implements SystemVulnerabilityService {

    @Autowired
    private SystemVulnerabilityMapper systemVulnerabilityMapper;

    /**
     * 添加系统风险，入库
     *
     * @param systemVulnerabilityList 漏洞信息
     */
    @Override
    public int addSystemVulnerability(List<SystemVulnerability> systemVulnerabilityList) {
        // 1. 根据mac地址删除原有数据，以免重复
        String mac = systemVulnerabilityList.get(0).getMac();
        systemVulnerabilityMapper.deleteByMac(mac);

        // 2. 批量插入
        return systemVulnerabilityMapper.insertBatch(systemVulnerabilityList);
    }

    /**
     * 查询系统风险列表
     *
     * @param myParam 查询条件
     * @return 漏洞列表
     */
    @Override
    public ResponseResult findSystemVulnerabilityList(MyParam myParam) {
        // 1. 获取分页信息
        PageHelper.startPage(myParam.getPage(), myParam.getLimit());

        // 2. 查询列表
        List<SystemVulnerability> systemVulnerabilityList = systemVulnerabilityMapper.selectAll(myParam);

        // 3. 进行分页
        PageInfo pageInfo = new PageInfo(systemVulnerabilityList);

        // 4. 封装并返回数据
        return new ResponseResult(pageInfo.getTotal(), pageInfo.getList());
    }

    /**
     * 删除系统风险
     *
     * @param ids 漏洞id
     * @return 删除结果
     */
    @Override
    public ResponseResult deleteSystemVulnerability(Integer[] ids) {
        systemVulnerabilityMapper.deleteByIds(ids);
        return new ResponseResult(0, "删除成功");
    }
}
