package com.tpp.threat_perception_platform.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tpp.threat_perception_platform.dao.UserVulnerabilityMapper;
import com.tpp.threat_perception_platform.param.MyParam;
import com.tpp.threat_perception_platform.pojo.UserVulnerability;
import com.tpp.threat_perception_platform.response.ResponseResult;
import com.tpp.threat_perception_platform.service.UserVulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserVulnerabilityServiceImpl implements UserVulnerabilityService {

    @Autowired
    private UserVulnerabilityMapper userVulnerabilityMapper;

    /**
     * 添加用户漏洞信息
     * @param userVulnerabilities
     * @return
     */
    @Override
    public int addUserVulnerability(List<UserVulnerability> userVulnerabilities) {
        // 1.将数据库中原有的数据删除，以免重复
        // 根据探测到的主机的mac地址，将该主机在数据库中已有的信息全部删除，以免重复
        // 获取mac地址
        String mac = userVulnerabilities.get(0).getMac();
        // 删除数据
        userVulnerabilityMapper.deleteByMac(mac);

        // 2.将新数据入库
        return userVulnerabilityMapper.insertBatch(userVulnerabilities);
    }

    /**
     * 获取用户的漏洞列表信息（联合查询）
     * @param param
     * @return
     */
    @Override
    public ResponseResult getAllUserVulnerability(MyParam param) {
        // 1. 获取分页信息
        PageHelper.startPage(param.getPage(), param.getLimit());

        // 2. 获取数据
        List<UserVulnerability> userVulnerabilities = userVulnerabilityMapper.selectAll(param);

        // 3. 封装数据
        PageInfo pageInfo = new PageInfo(userVulnerabilities);

        // 4. 返回数据
        return new ResponseResult<>(pageInfo.getTotal(), pageInfo.getList());
    }

    @Override
    public ResponseResult deleteUserVulnerability(Integer[] ids) {
        // 删除数据
        userVulnerabilityMapper.delete(ids);

        // 返回结果
        return new ResponseResult(0, "删除成功");
    }
}
