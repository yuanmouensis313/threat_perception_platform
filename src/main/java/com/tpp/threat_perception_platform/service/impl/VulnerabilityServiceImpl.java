package com.tpp.threat_perception_platform.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tpp.threat_perception_platform.dao.VulnerabilityMapper;
import com.tpp.threat_perception_platform.param.MyParam;
import com.tpp.threat_perception_platform.pojo.Account;
import com.tpp.threat_perception_platform.pojo.User;
import com.tpp.threat_perception_platform.pojo.Vulnerability;
import com.tpp.threat_perception_platform.response.ResponseResult;
import com.tpp.threat_perception_platform.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.util.List;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;

    /**
     * 查询漏洞列表,返回前端
     * @param param
     * @return
     */
    @Override
    public ResponseResult findVulnerabilityList(MyParam param) {

        // 1. 进行分页
        PageHelper.startPage(param.getPage(), param.getLimit());

        // 2. 查询列表
        List<Vulnerability> vulnerabilityList = vulnerabilityMapper.selectAll(param);

        // 3. 获取分页信息
        PageInfo pageInfo = new PageInfo(vulnerabilityList);

        // 4. 返回信息
        return new ResponseResult(pageInfo.getTotal(), pageInfo.getList());
    }

    /**
     * 查询所有漏洞的列表，不做分页，传输到客户端进行测试
     * @return
     */
    @Override
    public List<Vulnerability> findAll() {
        return vulnerabilityMapper.findAll();
    }

    /**
     * 删除漏洞
     * @param ids
     * @return
     */
    @Override
    public ResponseResult deleteVulnerability(Integer[] ids) {
        // 删除数据
        vulnerabilityMapper.delete(ids);
        // 返回结果
        return new ResponseResult(0, "删除成功");
    }

    /**
     * 添加漏洞记录
     * @param vulnerability
     * @return
     */
    @Override
    public ResponseResult save(Vulnerability vulnerability) {
        // 先查询 是否有该记录
        Vulnerability db_vulnerability = vulnerabilityMapper.selectByVulName(vulnerability.getVulName());
        if ( db_vulnerability!= null){
            return new ResponseResult<>(1003, "该漏洞信息已存在！");
        }
        // 添加
        vulnerabilityMapper.insertSelective(vulnerability);
        return new ResponseResult<>(0, "添加成功！");
    }
}
